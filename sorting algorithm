
# -*- coding: utf-8 -*-
"""
Created on Sat Aug  1 16:48:43 2020

@author: kevin
"""

import numpy as np
#here we build maily 3 type of function 
#1-->verifing heap property at given node
#2-->changing tree to heap tree
#3-->heap sorting 

##for verirfing heap proporty at given node
def max_heap_verifiaction(ar , n):
    left = (2*n) +1
    right =(2*n) +2
    largest = n
        
    if(left <= len(ar)-1):
        if( ar[left] <= ar[n]):
            largest = n
        else:
            largest = left
            #print("largest =" , str(largest))
            
    if(right <= len(ar)-1):
        if(ar[right] <= ar[largest]):
            temp = 0
        else:
            #print("largest =" , str(largest))
            largest = right
            
    #print("Largest = "+ str(largest) + " n = "+ str(n))
    if largest != n:
        #print("rudra")
        temp = ar[n]
        ar[n] = ar[largest]
        ar[largest] = temp
        max_heap_verifiaction(ar, largest) 
    
        
#changing tree to max heap tree
        
def make_max_heap(ar):
    for i in range (int(int(len(ar))/2) -1,-1, -1 ):
        #print("i = " + str(i))
        max_heap_verifiaction(ar, i)
        #print(i)
        
#max -heap sort
        #in this we need this steps
        #1-->build max heap first so maximum element at root
        #2-->replace first element with last
        #3--> reduce size of array by one apply max_heap _verification at root node
        #4--> repeat step 2 and 3 till all element is extrected
def heapsort(ar):
    make_max_heap(ar)
    print(ar)
    lenth = int(len(ar))
    for i in range (lenth ,0, -1 ):
        t = ar[0]
        #print("i =" +str(i))
        
        print(ar[0])
        ar[0] = ar[len(ar) - 1]
        ar[len(ar) - 1] = t
        ar.pop(len(ar) - 1)
        #print(ar)
        max_heap_verifiaction(ar, 0)
        #print(ar)
    #print(ar[0])
    
ar = [12,34,23,100,232,65,67,87,96,0]  
heapsort(ar)

# -*- coding: utf-8 -*-
"""
Created on Fri Jul 31 21:18:40 2020

@author: kevin
"""

n = int(input("Enter number of element : "))
ar = []
for i in range (0,n):
    temp= int(input("enter element "+ str(i +1) + " : "))
    ar.append(temp)
    
print(ar)

new = []
new.append(ar[0])
for i in range(1,n):
    temp = ar[i]
    j = 0
    while(j < i and new[j] < temp):
        j= j +1
    new.insert(j, temp)

    
print(new)


#mplt.show()
#mpl.show()
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 31 22:37:37 2020

@author: kevin
"""
import numpy as np

#here we are devide array in such way that each part has max 1 len
#then  make combine method to combine 2 parts arry in one 

#method for deviding where a in array ,s = starting index , e = ending index
def merge_sort(a,s,e):
    if(s < e):
        m = int((s + e)/2)
        merge_sort(a, s, m)
        merge_sort(a, m+1, e)
        print(" m =" + str(m) + "s =" + str(s) + " e = " + str(e))
        merge(a , s ,m ,e) #for merging two parts

#method for merging two array
def merge(a , s ,m ,e):
    n1 = m -s + 1
    n2 = e - m
    
    left = np.full((n1) , 999)
    right = np.full((n2) , 999)
    
    for i in range(0 , n1):
        left[i] = a[s+i]
    print(left)
  
    for j in range (0,n2):
        right[j] = a[m + j +1]
    print(right)
    
    y =0
    z =0
    print("aaa")
    for k in range(s , e +1):
       if(y < n1 and z <n2):
           if(left[y] <= right[z]):
               a[k] = left[y]
               y = y+1
           else: 
               a[k] = right[z]
               z= z+1
       else:
           if(y >= n1 and z < n2):
               a[k] = right[z]
               z= z+1
           else:
               a[k] = left[y]
               y = y+1
               
               
             
                
n = int(input("please enter sizd of array"))
a = np.zeros((n) , int)
for i in range(0 , n):
    temp= int(input("please enter element" + str(i+1)))   
    a[i] = temp             
merge_sort(a, 0, n-1)
print(a)
